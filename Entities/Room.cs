//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;
using System.Security.Cryptography.X509Certificates;

namespace UIKitTutorials.Entities
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    
    public partial class Room
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Room()
        {
            this.RegisterRooms = new HashSet<RegisterRoom>();
        }
    
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public bool Status { get; set; }
        public string Image { get; set; }
        public string Location { get; set; }
        public Nullable<double> Rating { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<RegisterRoom> RegisterRooms { get; set; }

        public string GetPhoto
        {
            get
            {
                if (Image is null)
                    return Directory.GetCurrentDirectory() + @"\Images\Room\Default.jpg";

                return Directory.GetCurrentDirectory() + @"\Images\Room\" + Image.Trim();
            }
        }

        public string GetStatusColor
        {
            get
            {
                if (Status)
                {
                    return "#42E448";
                }

                return "#FF5656";
            }
        }

        public string GetStatusStr
        {
            get
            {
                bool result = GetActualitiStatus(Id);

                if (result)
                {
                    return "Свободен";
                }
                    

                //int days = GetDaysToAccommodation(Id);

                //if (days >= 7 && days <= 7)
                //{
                //    return "Занят";
                //}

                //if (days <= 0)
                //{
                //    return "Свободен";
                //}

                //if (days > 0 )
                //{
                //    return $"Свободен с ограничением до {DateTime.Now.AddDays(days).Date}";
                //}

                return "Занят";
            }
        }

        public string ShortDesc
        {
            get
            {
                string[] str = Description.Split(' ');

                string[] words = new string[10];

                for (int i = 0; i < 6; i++)
                {
                    words[i] = str[i];
                }

                return String.Join(" ", words);

            }
        }


        // Helpers
        protected bool GetActualitiStatus(int roomId)
        {
            var rooms = HotelContext.GetContext().RegisterRooms.Where(x => x.Id_room == roomId);

            var room = new RegisterRoom();

            if (rooms.Count() == 0)
                return true;

            foreach (var item in rooms)
            {
                if (item.EndDate < DateTime.Now)
                    continue;

                if (item.EndDate > DateTime.Now && item.EndDate <= DateTime.Now.AddDays(30))
                {
                    room = item;
                }
            }

            var StartDate = room.StartDate;
            var EndDate = room.EndDate;

            var date = DateTime.Now.Date;

            while (StartDate <= EndDate)
            {
                if (StartDate == date)
                    return false;
                
                StartDate = StartDate.AddDays(1);
            }

            return false;
        }

        protected int GetDaysToAccommodation(int roomId)
        {
            var room = HotelContext.GetContext().RegisterRooms.FirstOrDefault(r => r.Id_room == roomId);

            if (room is null)
                return 0;
            

            var StartDate = room.StartDate;
            var EndDate = room.EndDate;

            if (room is null)
                return 0;

            return (EndDate - StartDate).Days;
        }


    }
}
